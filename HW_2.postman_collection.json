{
	"info": {
		"_postman_id": "79ab2c75-1f48-47d6-aee9-89241c48488a",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body string matches\", function() {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var json_resp = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name is right\", function () {\r",
							"    pm.expect(json_resp.name).to.eql(\"Anya\")\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age is right\", function() {\r",
							"    pm.expect(json_resp.age).to.eql(\"23\")\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary is right\", function() {\r",
							"    pm.expect(json_resp.salary).to.eql(1000)\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var json_req = pm.request.toJSON();\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function () {\r",
							"    pm.expect(json_resp.name).to.eql(json_req.body.formdata[0].value)\r",
							"})\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from response = Age from request\", function() {\r",
							"    pm.expect(json_resp.age).to.eql(json_req.body.formdata[1].value)\r",
							"})\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from response = Salary from request\", function() {\r",
							"    pm.expect(json_resp.salary).to.eql(+json_req.body.formdata[2].value)\r",
							"})\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(\"Параметр family из response =\", json_resp.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"'u_salary_1_5_year' from response = 'salary*4' from request\", function() {\r",
							"    pm.expect(json_resp.family.u_salary_1_5_year).to.eql(json_req.body.formdata[2].value*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var json_resp = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var json_req = pm.request.url.query.toJSON()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function() {\r",
							"    pm.expect(json_resp.name).to.eql(json_req[0].value)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from response = Age from request\", function() {\r",
							"    pm.expect(json_resp.age).to.eql(json_req[1].value)\r",
							"})\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from response = Salary from request\", function() {\r",
							"    pm.expect(json_resp.salary).to.eql(+json_req[2].value)\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(\"Параметр family из response = \", json_resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog has name\", function() {\r",
							"    pm.expect(json_resp.family.pets.dog.name) != null\r",
							"})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function() {\r",
							"    pm.expect(json_resp.family.pets.dog.age) != null\r",
							"})\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function() {\r",
							"    pm.expect(json_resp.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age is 4\", function() {\r",
							"    pm.expect(json_resp.family.pets.dog.age).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anya&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anya"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Спарсить response body в json.\r",
							"var json_resp = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var json_req = pm.request.url.query.toJSON()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response = Name from request\", function() {\r",
							"    pm.expect(json_resp.name).to.eql(json_req[0].value)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age from response = Age from request\", function() {\r",
							"    pm.expect(json_resp.age).to.eql(+json_req[1].value)\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Параметр salary из request = \" + json_req[2].value)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Параметр salary из response = \" + json_resp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"for (i = 0; i < 3; i++) {\r",
							"    console.log(i + \"-й элемент параметра salary из response = \"+ json_resp.salary[i])\r",
							"}\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function() {\r",
							"    pm.expect(json_resp.salary[0]).to.eql(+json_req[2].value)\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 из request\", function() {\r",
							"    pm.expect(+json_resp.salary[1]).to.eql(+json_req[2].value*2)\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2-й элемент параментра salary равен salary*3 из request\", function() {\r",
							"    pm.expect(+json_resp.salary[2]).to.eql(+json_req[2].value*3)\r",
							"})\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\")\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", json_resp.name)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", json_resp.age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", json_resp.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (i = 0; i < 3; i++) {\r",
							"    var salary_env = pm.environment.get(\"salary\")\r",
							"    console.log(salary_env[i]) \r",
							"    }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anya&age=23&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anya"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 6. Спарсить response body в json.\r",
							"var json_resp = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var json_req = pm.request.toJSON()\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Json response имеет параметр start_qa_salary\", function() {\r",
							"    pm.expect(json_resp).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_6_months\", function() {\r",
							"    pm.expect(json_resp).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_12_months\", function() {\r",
							"    pm.expect(json_resp).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(json_resp).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Json response имеет параметр qa_salary_after_3.5_years\", function() {\r",
							"    pm.expect(json_resp).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Json response имеет параметр person\", function () {\r",
							"    pm.expect(json_resp).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Параметр start_qa_salary равен salary из request\", function() {\r",
							"    pm.expect(json_resp.start_qa_salary).to.eql(+json_req.body.formdata[2].value)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_6_months равен salary*2 из request\", function() {\r",
							"    pm.expect(json_resp.qa_salary_after_6_months).to.eql(+json_req.body.formdata[2].value*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(json_resp.qa_salary_after_12_months).to.eql(+json_req.body.formdata[2].value*2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(json_resp['qa_salary_after_1.5_year']).to.eql(+json_req.body.formdata[2].value*3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function() {\r",
							"    pm.expect(json_resp['qa_salary_after_3.5_years']).to.eql(+json_req.body.formdata[2].value*3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(json_resp.person.u_name[1]).to.eql(+json_req.body.formdata[2].value)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Параметр u_age равен age из request\", function () {\r",
							"    pm.expect(json_resp.person.u_age).to.eql(+json_req.body.formdata[1].value)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(json_resp.person.u_salary_5_years).to.eql(+json_req.body.formdata[2].value*4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var key in json_resp.person) {\r",
							"console.log(json_resp.person[key]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}